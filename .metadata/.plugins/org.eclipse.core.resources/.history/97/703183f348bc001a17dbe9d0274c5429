package de.netzebw.web;

import javax.inject.Inject;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.headers.Header;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

import de.netzebw.service.IncidentService;
import de.netzebw.to.ErrorTO;
import de.netzebw.to.IncidentTO;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class IncidentResource implements IncidentResourceDoc 

{
  
 
  private  final IncidentService service;

  
  @Path("/{id}")
  @PUT
  @APIResponses({
      @APIResponse(
          responseCode = "201",
          description = "Störung wurde erfolgreich angelegt",
          headers = @Header(name = "Location", description = "URL auf die angelegte Störungsmeldung"),
          content = @Content(
              schema = @Schema(
                  type = SchemaType.OBJECT,
                  implementation = IncidentTO.class))),
      @APIResponse(responseCode = "204", description = "Störung wurde erfolgreich aktualisiert"),
      @APIResponse(
          responseCode = "400",
          description = "Bad Request",
          content = @Content(
              schema = @Schema(
                  type = SchemaType.OBJECT,
                  implementation = ErrorTO.class))) })
  
  //@Override
  public Response createOrUpdate(
      final String id,     
      final IncidentTO incident) {
    service.create();
    
    System.out.println("Das ist die id: " + id);
    return Response.ok().entity(service.find()).build();
  }

}
