package de.netzebw.lambda;

import static de.netzebw.lambda.DynamoDBResource.createTableRequest;
import static de.netzebw.lambda.DynamoDBResource.deleteTableRequest;
import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import static java.time.LocalDateTime.now;
import static java.util.UUID.randomUUID;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;

import java.util.Objects;

import de.netzebw.util.to.Message;
import de.netzebw.util.to.Reporter;
import de.netzebw.util.to.enums.InputChannel;
import de.netzebw.util.to.enums.ReporterRole;
import de.netzebw.util.to.enums.ReporterType;
import lombok.experimental.UtilityClass;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;
import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;
import software.amazon.awssdk.services.dynamodb.model.ListTablesResponse;

/**
 * The Class MessageProcessingTestHelper.
 *
 * @author Jochen Mink, CGI
 * @version 1.0.0
 * @since
 */
@UtilityClass
public class MessageProcessingTestHelper {

  public static final Reporter REPORTER_TO_1 =
      Reporter.builder().rptUuid(Objects.toString(randomUUID())).firstName("rptfirstname1").lastName("rptlastname1")
          .email("rptemail1@test.com").phoneNo0("012378984").phoneNo1("018748748").company("rptcompany1")
          .street("rptstreet1").houseNo("12a").zipCode("88935").city("rptcity1").cityDistrict("district1").department("testcenter1").salutation("herr")
          .build();

  public static final Message MESSAGE_TO_1 = Message.builder().uuid(Objects.toString(randomUUID())).anonymous(FALSE)
      .reporterType(ReporterType.CITIZEN).reporterRole(ReporterRole.CONTROLCENTER)
      .street("msgstreet1").zipCode("78914").city("Stuttgart1").cityDistrict("MÃ¶hringen1").houseNo("789")
      .lightingNo(99999).furtherRemarks("msgfrthrmks1").inputChannel(InputChannel.CENTRAL_OFFICE)
      .reportingTimestamp(Objects.toString(now())).zoneId("Z")
      .description("msgdesc1")
      .managedCustomer(TRUE).externalId("msgextid1").requestId("msgrqstid1")
      .reporter(REPORTER_TO_1)
      .build();

  public static final Reporter REPORTER_TO_2 =
      Reporter.builder().rptUuid(Objects.toString(randomUUID())).firstName("rptfirstname2").lastName("rptlastname2")
          .email("rptemail2@test.com").phoneNo0("1781787187").phoneNo1("87187187").company("rptcompany1")
          .street("rptstreet2").houseNo("147").zipCode("96217").city("rptcity2")
          .build();

  public static final Message MESSAGE_TO_2 = Message.builder().uuid(Objects.toString(randomUUID())).anonymous(FALSE)
      .reporterType(ReporterType.CITIZEN).reporterRole(ReporterRole.CONTROLCENTER)
      .street("msgstreet2").zipCode("12375").city("msgcity2").houseNo("456")
      .lightingNo(741).furtherRemarks("msgfrthrmks2").inputChannel(InputChannel.CENTRAL_OFFICE)
      .reportingTimestamp(Objects.toString(now())).zoneId("Z")
      .description("msgdesc2")
      .managedCustomer(TRUE).externalId("msgextid2").requestId("msgrqstid2")
      .reporter(REPORTER_TO_2)
      .build();

  public static final Message MESSAGE_TO_3 = Message.builder().uuid(Objects.toString(randomUUID())).anonymous(FALSE)
      .street("msgstreet3").zipCode("14756").city("msgcity3").houseNo("74123")
      .lightingNo((short) 896).furtherRemarks("msgfrthrmks2")
      .reportingTimestamp(Objects.toString(now())).zoneId("invalidtimezone")
      .description("msgdesc3")
      .managedCustomer(TRUE).externalId("msgextid3").requestId("msgrqstid3")
      .build();

  public static void createTableIfNotExists(final DynamoDbClient dynamoDb) {
    final CreateTableRequest createTableRequest = createTableRequest();
    if (existsTable(dynamoDb, createTableRequest.tableName())) {
      return;
    }
    dynamoDb.createTable(createTableRequest());
  }

  public static void deleteTableIfExists(final DynamoDbClient dynamoDb) {
    final DeleteTableRequest deleteTableRequest = deleteTableRequest();
    if (!existsTable(dynamoDb, deleteTableRequest.tableName())) {
      return;
    }
    dynamoDb.deleteTable(deleteTableRequest());
  }

  private static boolean existsTable(final DynamoDbClient dynamoDb, final String tableName) {
    if (null == dynamoDb) {
      return FALSE;
    }
    final ListTablesResponse listTableResponse = dynamoDb.listTables();
    return isNotEmpty(tableName) && null != listTableResponse && null != listTableResponse.tableNames() && !listTableResponse.tableNames().isEmpty()
        && listTableResponse.tableNames().stream().anyMatch(tableName::equals);
  }

}
