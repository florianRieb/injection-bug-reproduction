package de.netzebw.util.to;

import static de.netzebw.util.AttributeUtils.buildBooleanAttributeValue;
import static de.netzebw.util.AttributeUtils.buildStringAttributeValue;
import static de.netzebw.util.AttributeUtils.getAttributeValue;
import static java.util.Collections.unmodifiableMap;

import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Size;

import org.apache.commons.lang3.EnumUtils;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;

import de.netzebw.util.AttributeUtils;
import de.netzebw.util.entity.StaticMessageTable;
import de.netzebw.util.to.enums.InputChannel;
import de.netzebw.util.to.enums.ReporterRole;
import de.netzebw.util.to.enums.ReporterType;
import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

/**
 * Transfer object of an message
 * 
 * @author Florian, Riebandt CGI
 *
 */

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@RegisterForReflection
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_DEFAULT)
public class Message {

  @Schema(description = "Version 4 UUID für die Meldung", example = "d01efa32-4aea-4ef6-bcc7-a5dd1b079e50")
  private String uuid;

  @Size(max = 8)
  @Schema(description = "Funktionale ID", example = "12345678")
  private String functionalId;

  @Schema(description = "Zeitstempel der Erfassung", example = "2020-06-05T12:56:25.406")
  private String reportingTimestamp;

  @NotEmpty
  @Size(max = 50)
  @Schema(description = "Ort der Meldung", example = "Stuttgart",required = true)
  private String city;
  
  @Size(max = 50)
  @Schema(description = "Teilort der Meldung", example = "Stuttgart-Möhringen", required = false)
  private String cityDistrict;

  @Schema(description = "ist anonym", required = false)
  private Boolean anonymous;

  @Schema(description = "Melder Kategorie", required = false)
  private ReporterType reporterType;

  @Schema(description = "Melder Rolle", required = false)
  private ReporterRole reporterRole;

  @Size(max = 50)
  @Schema(description = "Melder Rolle sonstiges", required = false)
  private String reporterRoleOther;

  @Size(max = 50)
  @Schema(description = "Straße der Meldung", required = false)
  private String street;

  @Size(max = 5)
  @Schema(description = "PLZ der Meldung", required = false)
  private String zipCode;

  @Size(max = 5)
  @Schema(description = "HausNr der Meldung", required = false)
  private String houseNo;

  @Schema(description = "LeuchtstellenNr", required = false)
  private Integer lightingNo;

  @Size(max = 200)
  @Schema(description = "Bemerkungen zum Ort der Meldung", required = false)
  private String furtherRemarks;

  @Schema(
      description = "Eingangskanal",
      required = false)
  private InputChannel inputChannel;

  @Size(max = 50)
  @Schema(description = "Zeitzonen Id nach ISO-8601", required = false, example = "Europe/Berlin")
  private String zoneId;

  @Size(max = 500)
  @Schema(description = "Anmerkungen zur Meldung  ", required = false)
  private String description;

  @Schema(description = "Melder ist Betriebskunde", required = false)
  private Boolean managedCustomer;

  @Size(max = 50)
  @Schema(description = "externe Id", required = false)
  private String externalId;

  @Size(max = 50)
  @Schema(description = "Request Id", required = false)
  private String requestId;

  // private Reporter reporter;

  /** technical fields. */

  @Schema(description = "createdTimestamp", required = false)
  private String createdTimestamp;

  @Schema(description = "updatedTimestamp", required = false)
  private String updatedTimestamp;

  @Schema(description = "Melder der Meldung", implementation = Reporter.class)
  private Reporter reporter;

  @SuppressWarnings("unchecked")
  public static Message fromMapToItem(final Map<String, AttributeValue> item) {
    return null == item || item.isEmpty()
        ? null
        : Message.builder()
            // String
            .uuid(getAttributeValue(item, StaticMessageTable.MSG_UUID_COL, String.class))
            .functionalId(getAttributeValue(item, StaticMessageTable.MSG_FUNCTIONAL_ID_COL, String.class))          
            .city(getAttributeValue(item, StaticMessageTable.MSG_CITY_COL, String.class))
            .cityDistrict(getAttributeValue(item, StaticMessageTable.MSG_CITY_DISTRICT_COL, String.class))
            .street(getAttributeValue(item, StaticMessageTable.MSG_STREET_COL, String.class))
            .zipCode(getAttributeValue(item, StaticMessageTable.MSG_ZIP_CODE_COL, String.class))
            .houseNo(getAttributeValue(item, StaticMessageTable.MSG_HOUSE_NO_COL, String.class))
            .furtherRemarks(getAttributeValue(item, StaticMessageTable.MSG_FURTHER_REMARKS_COL, String.class))
            .zoneId(getAttributeValue(item, StaticMessageTable.MSG_ZONE_ID_COL, String.class))
            .description(getAttributeValue(item, StaticMessageTable.MSG_DESCRIPTION_COL, String.class)) 
            .reporterRoleOther(getAttributeValue(item, StaticMessageTable.MSG_REPORTER_ROLE_OTHER_COL, String.class))
            .reportingTimestamp(getAttributeValue(item, StaticMessageTable.MSG_REPORTING_TIMESTAMP_COL, String.class))
            // 
            .externalId(getAttributeValue(item, StaticMessageTable.MSG_EXTERNAL_ID_COL, String.class))
            .requestId(getAttributeValue(item, StaticMessageTable.MSG_REQUEST_ID_COL, String.class))        
            .createdTimestamp(getAttributeValue(item, StaticMessageTable.MSG_CREATED_TIMESTAMP_COL, String.class))
            .updatedTimestamp(getAttributeValue(item, StaticMessageTable.MSG_UPDATED_TIMESTAMP_COL, String.class))

            // Short
            .lightingNo(AttributeUtils.stringToShort(getAttributeValue(item, StaticMessageTable.MSG_LIGHTING_NO_COL, String.class)))
            // Boolean
            .anonymous(AttributeUtils.stringToBoolean(getAttributeValue(item, StaticMessageTable.MSG_ANONYMOUS_COL, String.class)))
            .managedCustomer(AttributeUtils.stringToBoolean(getAttributeValue(item, StaticMessageTable.MSG_MANAGED_CUSTOMER_COL, String.class)))

            // Enum
            .reporterRole(
                EnumUtils.getEnumIgnoreCase(ReporterRole.class, getAttributeValue(item, StaticMessageTable.MSG_REPORTER_ROLE_COL, String.class)))
            .reporterType(
                EnumUtils.getEnumIgnoreCase(ReporterType.class, getAttributeValue(item, StaticMessageTable.MSG_REPORTER_TYPE_COL, String.class)))
            .inputChannel(
                EnumUtils.getEnumIgnoreCase(InputChannel.class, getAttributeValue(item, StaticMessageTable.MSG_INPUT_CHANNEL_COL, String.class)))

            // Map
            .reporter(Reporter.fromMapToItem(getAttributeValue(item, StaticMessageTable.MSG_REPORTER_COL, Map.class)))
            .build();
  }

  public static Map<String, AttributeValue> fromItemToMap(final Message message) {
    final Map<String, AttributeValue> item = unmodifiableMap(new HashMap<String, AttributeValue>() {

      private static final long serialVersionUID = 1L;
      {
        // String values
        put(StaticMessageTable.MSG_UUID_COL, buildStringAttributeValue(message, Message::getUuid));
        put(StaticMessageTable.MSG_FUNCTIONAL_ID_COL, buildStringAttributeValue(message, Message::getFunctionalId));
        put(StaticMessageTable.MSG_CITY_COL, buildStringAttributeValue(message, Message::getCity));
        put(StaticMessageTable.MSG_CITY_DISTRICT_COL, buildStringAttributeValue(message, Message::getCityDistrict));
        put(StaticMessageTable.MSG_REPORTING_TIMESTAMP_COL, buildStringAttributeValue(message, Message::getReportingTimestamp));
        put(StaticMessageTable.MSG_REPORTER_TYPE_COL, buildStringAttributeValue(message, Message::getReporterType));
        put(StaticMessageTable.MSG_REPORTER_ROLE_COL, buildStringAttributeValue(message, Message::getReporterRole));
        put(StaticMessageTable.MSG_STREET_COL, buildStringAttributeValue(message, Message::getStreet));
        put(StaticMessageTable.MSG_ZIP_CODE_COL, buildStringAttributeValue(message, Message::getZipCode));
        put(StaticMessageTable.MSG_HOUSE_NO_COL, buildStringAttributeValue(message, Message::getHouseNo));
        put(StaticMessageTable.MSG_FURTHER_REMARKS_COL, buildStringAttributeValue(message, Message::getFurtherRemarks));
        put(StaticMessageTable.MSG_INPUT_CHANNEL_COL, buildStringAttributeValue(message, Message::getInputChannel));
        put(StaticMessageTable.MSG_ZONE_ID_COL, buildStringAttributeValue(message, Message::getZoneId));
        put(StaticMessageTable.MSG_REPORTER_ROLE_OTHER_COL, buildStringAttributeValue(message, Message::getReporterRoleOther));

        put(StaticMessageTable.MSG_DESCRIPTION_COL, buildStringAttributeValue(message, Message::getDescription));
        put(StaticMessageTable.MSG_EXTERNAL_ID_COL, buildStringAttributeValue(message, Message::getExternalId));
        put(StaticMessageTable.MSG_REQUEST_ID_COL, buildStringAttributeValue(message, Message::getRequestId));
        put(StaticMessageTable.MSG_CREATED_TIMESTAMP_COL, buildStringAttributeValue(message, Message::getCreatedTimestamp));
        put(StaticMessageTable.MSG_UPDATED_TIMESTAMP_COL, buildStringAttributeValue(message, Message::getUpdatedTimestamp));

        // Short as String values
        put(StaticMessageTable.MSG_LIGHTING_NO_COL, buildStringAttributeValue(message, Message::getLightingNo));

        // Boolean values
        put(StaticMessageTable.MSG_ANONYMOUS_COL, buildBooleanAttributeValue(message, Message::getAnonymous));
        put(StaticMessageTable.MSG_MANAGED_CUSTOMER_COL, buildBooleanAttributeValue(message, Message::getManagedCustomer));

        // Map values
        put(StaticMessageTable.MSG_REPORTER_COL, AttributeUtils.buildMapAttributeValue(Reporter.fromItemToMap(message.getReporter())));

      }

    });

    return item;
  }

}
